version: '3.8'
services:
  postgres:
    image: postgres:14.2-alpine
    container_name: postgres
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker-inits/postgres/initdb.d:/docker-entrypoint-initdb.d:ro
      - ./docker-inits/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=secret
    ports:
      - "127.0.0.1:5432:5432"
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 10s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.2
    container_name: zookeeper
    restart: always
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    healthcheck:
      test: echo st | nc localhost 2181
      interval: 10s
      timeout: 10s
      retries: 5

  broker:
    image: confluentinc/cp-kafka:7.2.2
    container_name: broker
    restart: always
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "127.0.0.1:29092:29092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://broker:9092,PLAINTEXT_HOST://localhost:29092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
    healthcheck:
      test: echo st | nc localhost 29092
      interval: 10s
      timeout: 10s
      retries: 5

  ouva-heartbeat-data:
    image: repo.internal.ouva.co/repository/docker-public/ouva-mock-data:1.0.0
    container_name: ouva-heartbeat-data
    depends_on:
      broker:
        condition: service_healthy
    restart: on-failure
    environment:
      - APP_KAFKA__BOOTSTRAP_SERVER=broker:9092

  ouva-assignment:
    image: ouva/assignment:0.0.1
    container_name: ouva-assignment
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "127.0.0.1:8080:8080"
    environment:
      - KAFKA_HOST=broker
      - KAFKA_PORT=9092
      - POSTGRES_HOST=postgres

volumes:
  postgres_data:
